# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import manager_pb2 as manager__pb2


class ManagerStub(object):
    """The manager service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/manager.Manager/CreateUser',
                request_serializer=manager__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=manager__pb2.CreateUserReply.FromString,
                )
        self.CreateArticle = channel.unary_unary(
                '/manager.Manager/CreateArticle',
                request_serializer=manager__pb2.CreateArticleRequest.SerializeToString,
                response_deserializer=manager__pb2.CreateArticleReply.FromString,
                )
        self.CreateWord = channel.unary_unary(
                '/manager.Manager/CreateWord',
                request_serializer=manager__pb2.CreateWordRequest.SerializeToString,
                response_deserializer=manager__pb2.CreateWordReply.FromString,
                )
        self.UpdateWordcloud = channel.unary_unary(
                '/manager.Manager/UpdateWordcloud',
                request_serializer=manager__pb2.UpdateWordcloudRequest.SerializeToString,
                response_deserializer=manager__pb2.UpdateWordcloudReply.FromString,
                )
        self.GetWord = channel.unary_unary(
                '/manager.Manager/GetWord',
                request_serializer=manager__pb2.GetWordRequest.SerializeToString,
                response_deserializer=manager__pb2.GetWordReply.FromString,
                )


class ManagerServicer(object):
    """The manager service definition.
    """

    def CreateUser(self, request, context):
        """Sends a Word
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWordcloud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=manager__pb2.CreateUserRequest.FromString,
                    response_serializer=manager__pb2.CreateUserReply.SerializeToString,
            ),
            'CreateArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateArticle,
                    request_deserializer=manager__pb2.CreateArticleRequest.FromString,
                    response_serializer=manager__pb2.CreateArticleReply.SerializeToString,
            ),
            'CreateWord': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWord,
                    request_deserializer=manager__pb2.CreateWordRequest.FromString,
                    response_serializer=manager__pb2.CreateWordReply.SerializeToString,
            ),
            'UpdateWordcloud': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWordcloud,
                    request_deserializer=manager__pb2.UpdateWordcloudRequest.FromString,
                    response_serializer=manager__pb2.UpdateWordcloudReply.SerializeToString,
            ),
            'GetWord': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWord,
                    request_deserializer=manager__pb2.GetWordRequest.FromString,
                    response_serializer=manager__pb2.GetWordReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'manager.Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """The manager service definition.
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Manager/CreateUser',
            manager__pb2.CreateUserRequest.SerializeToString,
            manager__pb2.CreateUserReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Manager/CreateArticle',
            manager__pb2.CreateArticleRequest.SerializeToString,
            manager__pb2.CreateArticleReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Manager/CreateWord',
            manager__pb2.CreateWordRequest.SerializeToString,
            manager__pb2.CreateWordReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateWordcloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Manager/UpdateWordcloud',
            manager__pb2.UpdateWordcloudRequest.SerializeToString,
            manager__pb2.UpdateWordcloudReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/manager.Manager/GetWord',
            manager__pb2.GetWordRequest.SerializeToString,
            manager__pb2.GetWordReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
